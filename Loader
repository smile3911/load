local player = game.Players.LocalPlayer

if player.Name ~= "bobbibitybob1" then
    local kickMessage = "You are banned from vape for trying to bypass the whitelist system :trol"
    kickUser(kickMessage)
else
    print("User is whitelisted.")
end

function kickUser(message)
    print("Kicking user: " .. message
end

game.StarterGui:SetCore("SendNotification",  {
 Title = "This is only free for 2 weeks.";
 Text = "Made By ?";
 Icon = "";
 Duration = 98083905839058095809389034;
 Button1 = "Close";
 Callback = NotificationBindable;
}
)
local UILibrary = loadstring(game:HttpGet("https://pastebin.com/raw/V1ca2q9s"))()

local MainUI = UILibrary.Load("Â£")
local FirstPage = MainUI.AddPage("Cracked scripts")

local FirstLabel = FirstPage.AddLabel("Silent aims/Locks")

local SecondPage = MainUI.AddPage("Locks")

local FirstButton = FirstPage.AddButton("Aura X", function()
getgenv().Settings = {

["Silent"] = {

["Enabled"] = true,

["AimPart"] = "HumanoidRootPart",

["WallCheck"] = true,

["Visualize"] = true,

["Prediction"] = {

  ["Horizontal"] = 0.15,

  ["Vertical"] = 0.05,

},

    ["AutoPrediction"] = {

        ["Enabled"] = true,

        ["Type"] = "Normal", --//Normal, Custom

           ["ping20_30"] = 0.12588,

           ["ping30_40"] = 0.11911,

           ["ping40_50"] = 0.12471,

           ["ping50_60"] = 0.13766,

           ["ping60_70"] = 0.13731,

           ["ping70_80"] = 0.13951,

           ["ping80_90"] = 0.14181,

           ["ping90_100"] = 0.148,

           ["ping100_110"] = 0.156,

           ["ping110_120"] = 0.1567,

           ["ping120_130"] = 0.1601,

           ["ping130_140"] = 0.1637,

           ["ping140_150"] = 0.173,

           ["ping150_160"] = 0.1714,

           ["ping160_170"] = 0.1863,

           ["ping170_180"] = 0.1872,

           ["ping180_190"] = 0.1848,

           ["ping190_200"] = 0.1865,

    },

["Mode"] = "Namecall", --index,namecal

},

["FOV"] = {

["Enabled"] = true,

["Size"] = 70,

["Filled"] = false,

["Thickness"] = 0.66,

["Transparency"] = 0.9,

["Color"] = Color3.fromRGB(255,255,255),

},

["Camlock"] = {

    ["Enabled"] = false,

    ["AimPart"] = "HumanoidRootPart",

    ["Prediction"] = {

      ["Horizontal"] = 0.185,

      ["Vertical"] = 0.1,

    },

    ["Smoothness"] = 0.1,

    ["AutoPrediction"] = {

        ["Enabled"] = false,

        ["Type"] = "Normal", --//Normal, Custom

           ["ping20_30"] = 0.12588,

           ["ping30_40"] = 0.11911,

           ["ping40_50"] = 0.12471,

           ["ping50_60"] = 0.12766,

           ["ping60_70"] = 0.12731,

           ["ping70_80"] = 0.12951,

           ["ping80_90"] = 0.13181,

           ["ping90_100"] = 0.138,

           ["ping100_110"] = 0.146,

           ["ping110_120"] = 0.1367,

           ["ping120_130"] = 0.1401,

           ["ping130_140"] = 0.1437,

           ["ping140_150"] = 0.153,

           ["ping150_160"] = 0.1514,

           ["ping160_170"] = 0.1663,

           ["ping170_180"] = 0.1672,

           ["ping180_190"] = 0.1848,

           ["ping190_200"] = 0.1865,

    },

    ["Shake"] = {

        ["X"] = 10,

        ["Y"] = 0,

        ["Z"] = 0, --dont touch

    },

},

["Misc"] = {

    ["NoDelay"] = true,

    ["AutoReload"] = false,

    ["AutoAir"] = {

        ["Enabled"] = true,

        ["Interval"] = 0.5,

    },

    ["CMDS"] = { 

        ["Enabled"] = false,

        ["FOVPrefix"] = "B",

        ["Prediction"] = "A",

  },

},

["Resolution"] = {

    ["Value"] = 1,

  },

["Resolvers"] = {  --entirely not

    ["Enabled"] = false,

    ["AutoDetect"] = false,

    ["Type"] = "Recalculator",

},

    ["Visuals"] = {

        ["Ambient"] = {

            ["Enabled"] = false,

            ["Color"] = Color3.fromRGB(4, 0, 255),

        },

        ["OutDoor Ambient"] = {

            ["Enabled"] = false,

            ["Color"] = Color3.fromRGB(4, 0, 255)

        },

        ["Fog Modifications"] = {

            ["Enabled"] = false,

            ["Color"] = Color3.fromRGB(4, 0, 255),

            ["Start"] = 15,

            ["End"] = 100 

        },

        ["ColorCorrection"] = {

            ["Enabled"] = false,

            ["Brightness"] = 0,

            ["Saturation"] = 5,

            ["Contrast"] = 2,

        },

    },

}

loadstring(game:HttpGet("https://raw.githubusercontent.com/bobbbb-b/B/main/77_SJQ0ZC.lua"))()

end)

local FirstButton = SecondPage.AddButton("LunarWare lock", function()
getgenv().Settings = {
    rewrittenmain = {
        Enabled = true,
        Key = "q",
        DOT = true,
        AIRSHOT = true,
        NOTIF = true,
        AUTOPRED = false,
        FOV = math.huge,
        RESOVLER = false,
    }
}
 
local SelectedPart = "HumanoidRootPart"
local Prediction = true
getgenv().PredictionValue = 0.15
 getgenv().AntiGroundShots = true

    local AnchorCount = 0
    local MaxAnchor = 50
 
    local CC = game:GetService"Workspace".CurrentCamera
    local Plr;
    local enabled = false
    local mouse = game.Players.LocalPlayer:GetMouse()
    local placemarker = Instance.new("Part", game.Workspace)
 
    function makemarker(Parent, Adornee, Color, Size, Size2)
        local e = Instance.new("BillboardGui", Parent)
        e.Name = "PP"
        e.Adornee = Adornee
        e.Size = UDim2.new(Size, Size2, Size, Size2)
        e.AlwaysOnTop = Settings.rewrittenmain.DOT
        local a = Instance.new("Frame", e)
        if Settings.rewrittenmain.DOT == true then
        a.Size = UDim2.new(0.5, 0, 0.5, 0)
        else
        a.Size = UDim2.new(0, 0, 0, 0)
        end
        if Settings.rewrittenmain.DOT == true then
        a.Transparency = 0
        a.BackgroundTransparency = 0
        else
        a.Transparency = 1
        a.BackgroundTransparency = 1
        end
        a.BackgroundColor3 = Color
        local g = Instance.new("UICorner", a)
        if Settings.rewrittenmain.DOT == false then
        g.CornerRadius = UDim.new(0, 0)
        else
        g.CornerRadius = UDim.new(1, 1) 
        end
        return(e)
    end
 
 
    local data = game.Players:GetPlayers()
    function noob(player)
        local character
        repeat wait() until player.Character
        local handler = makemarker(guimain, player.Character:WaitForChild(SelectedPart), Color3.fromRGB(107, 184, 255), 0.3, 3)
        handler.Name = player.Name
        player.CharacterAdded:connect(function(Char) handler.Adornee = Char:WaitForChild(SelectedPart) end)
 
 
        spawn(function()
            while wait() do
                if player.Character then
                end
            end
        end)
    end
 
    for i = 1, #data do
        if data[i] ~= game.Players.LocalPlayer then
            noob(data[i])
        end
    end
 
    game.Players.PlayerAdded:connect(function(Player)
        noob(Player)
    end)
 
    spawn(function()
        placemarker.Anchored = true
        placemarker.CanCollide = false
        if Settings.rewrittenmain.DOT == true then
        placemarker.Size = Vector3.new(0, 0, 0)
        else
        placemarker.Size = Vector3.new(0, 0, 0) 
        end
        placemarker.Transparency = -1
        if Settings.rewrittenmain.DOT then
        makemarker(placemarker, placemarker, Color3.fromRGB(255, 0, 0), 0.40, 0)
        end
    end)

 game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(k)
        if k == Settings.rewrittenmain.Key and Settings.rewrittenmain.Enabled then
            if enabled == true then
                enabled = false
                if Settings.rewrittenmain.NOTIF == true then
                    Plr = getClosestPlayerToCursor()
                game.StarterGui:SetCore("SendNotification", {
                    Title = "LunarWare";
                    Text = "Unlocked.",
                    Duration = 5
                })
            end
            else
                Plr = getClosestPlayerToCursor()
                enabled = true
                if Settings.rewrittenmain.NOTIF == true then
 
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "LunarWare";
                        Text = "Target: "..tostring(Plr.Character.Humanoid.DisplayName),
                        Duration = 5
                    })
 
                end
            end
        end
    end)

    function getClosestPlayerToCursor()
        local closestPlayer
        local shortestDistance = getgenv().Settings.rewrittenmain.FOV

        for i, v in pairs(game.Players:GetPlayers()) do
            if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild("HumanoidRootPart") then
                local pos = CC:WorldToViewportPoint(v.Character.PrimaryPart.Position)
                local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(mouse.X, mouse.Y)).magnitude
                if magnitude < shortestDistance then
                    closestPlayer = v
                    shortestDistance = magnitude
                end
            end
        end
        return closestPlayer
    end
 
    local pingvalue = nil;
    local split = nil;
    local ping = nil;
 
    game:GetService("RunService").Stepped:connect(function()
        if enabled and Plr.Character ~= nil and Plr.Character:FindFirstChild("HumanoidRootPart") then
            placemarker.CFrame = CFrame.new(Plr.Character.HumanoidRootPart.Position+(Plr.Character.HumanoidRootPart.Velocity*getgenv().PredictionValue))
        else
            placemarker.CFrame = CFrame.new(0, 9999, 0)
        end

        if getgenv().Settings.rewrittenmain.AUTOPRED == true then
   local pingvalue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
    local split = string.split(pingvalue,'(')
    local ping = tonumber(split[1])
    if ping > 300 then
        getgenv().PredictionValue = 0.234
    elseif ping > 290 then
        getgenv().PredictionValue = 0.222
    elseif ping > 280 then
        getgenv().PredictionValue = 0.24
    elseif ping > 270 then
        getgenv().PredictionValue = 0.2385
    elseif ping > 260 then
        getgenv().PredictionValue = 0.2158
    elseif ping > 250 then
        getgenv().PredictionValue = 0.2148
    elseif ping > 240 then
        getgenv().PredictionValue = 0.24
    elseif ping > 230 then
        getgenv().PredictionValue = 0.23
    elseif ping > 220 then
        getgenv().PredictionValue = 0.2
    elseif ping > 210 then
        getgenv().PredictionValue = 0.19834398934
    elseif ping > 200 then
        getgenv().PredictionValue = 0.198439891120
    elseif ping > 190 then
        getgenv().PredictionValue = 0.194924892910
    elseif ping > 180 then
        getgenv().PredictionValue = 0.19291198328
    elseif ping > 180 then
        getgenv().PredictionValue = 0.19291198328
    elseif ping > 170 then
        getgenv().PredictionValue = 0.18
    elseif ping > 160 then
        getgenv().PredictionValue = 0.1754
    elseif ping  >150 then
        getgenv().PredictionValue = 0.171
    elseif ping  >140 then
        getgenv().PredictionValue = 0.17
       elseif ping > 130 then
        getgenv().PredictionValue = 0.157
    elseif ping > 120 then
        getgenv().PredictionValue = 0.166
    elseif ping > 110 then
        getgenv().PredictionValue = 0.1642271
    elseif ping > 100 then
        getgenv().PredictionValue = 0.1533
    elseif ping > 90 then
        getgenv().PredictionValue = 0.13573
    elseif ping > 80 then
        getgenv().PredictionValue = 0.165
    elseif ping > 70 then
        getgenv().PredictionValue = 0.142
    elseif ping > 50 then
        getgenv().PredictionValue = 0.1267
    elseif ping > 40 then
        getgenv().PredictionValue = 0.12
    elseif ping > 30 then
        getgenv().PredictionValue = 0.112
   elseif ping > 20 then
        getgenv().PredictionValue = 0.102
   elseif ping > 10 then
        getgenv().PredictionValue = 0.087
            end
        end
    end)
 
    local mt = getrawmetatable(game)
    local old = mt.__namecall
    setreadonly(mt, false)
    mt.__namecall = newcclosure(function(...)
        local args = {...}
        local sex = {"UpdateMousePos", "GetMousePos", "MousePos"}
        if enabled and table.find(sex, args[2]) and getnamecallmethod() == "FireServer" and getgenv().Settings.rewrittenmain.Enabled and Plr.Character ~= nil then
 
            -- args[3] = Plr.Character.HumanoidRootPart.Position+(Plr.Character.HumanoidRootPart.Velocity*getgenv().PredictionValue)
            --[[
            if getgenv().Settings.rewrittenmain.AIRSHOT == true then
                if game.Workspace.Players[Plr.Name].Humanoid:GetState() == Enum.HumanoidStateType.Freefall then -- Plr.Character:WaitForChild("Humanoid"):GetState() == Enum.HumanoidStateType.Freefall
 
                    --// Airshot
                    args[3] = Plr.Character.LeftFoot.Position+(Plr.Character.LeftFoot.Velocity*getgenv().PredictionValue)
 
                else
                    args[3] = Plr.Character.HumanoidRootPart.Position+(Plr.Character.HumanoidRootPart.Velocity*getgenv().PredictionValue)
 
                end
            else
                    args[3] = Plr.Character.HumanoidRootPart.Position+(Plr.Character.HumanoidRootPart.Velocity*getgenv().PredictionValue)
            end
            ]]
            if Prediction == true then
 
            args[3] = Plr.Character[SelectedPart].Position+(Plr.Character[SelectedPart].Velocity*getgenv().PredictionValue)
 
            else
 
            args[3] = Plr.Character[SelectedPart].Position
 
            end
 
            return old(unpack(args))
        end
        return old(...)
    end)
 
    game:GetService("RunService").RenderStepped:Connect(function()
        if getgenv().Settings.rewrittenmain.RESOVLER == true and Plr.Character ~= nil and enabled and getgenv().Settings.rewrittenmain.Enabled then
        if getgenv().Settings.rewrittenmain.AIRSHOT == true and enabled and Plr.Character ~= nil then
 
            if game.Workspace.Players[Plr.Name].Humanoid:GetState() == Enum.HumanoidStateType.Freefall then -- Plr.Character:WaitForChild("Humanoid"):GetState() == Enum.HumanoidStateType.Freefall
 
                --// Airshot
 
                --// Anchor Check
 
                if Plr.Character ~= nil and Plr.Character.HumanoidRootPart.Anchored == true then
                    AnchorCount = AnchorCount + 1
                    if AnchorCount >= MaxAnchor then
                        Prediction = false
                        wait(2)
                        AnchorCount = 0;
                    end
                else
                    Prediction = true
                    AnchorCount = 0;
                end
 
                SelectedPart = "LeftFoot"
 
            else
                --// Anchor Check
 
                if Plr.Character ~= nil and Plr.Character.HumanoidRootPart.Anchored == true then
                    AnchorCount = AnchorCount + 1
                    if AnchorCount >= MaxAnchor then
                        Prediction = false
                        wait(2)
                        AnchorCount = 0;
                    end
                else
                    Prediction = true
                    AnchorCount = 0;
                end
 
                SelectedPart = "HumanoidRootPart"
 
            end
            else
 
                --// Anchor Check
 
                if Plr.Character ~= nil and Plr.Character.HumanoidRootPart.Anchored == true then
                    AnchorCount = AnchorCount + 1
                    if AnchorCount >= MaxAnchor then
                        Prediction = false
                        wait(2)
                        AnchorCount = 0;
                    end
                else
                    Prediction = true
                    AnchorCount = 0;
                end
 
                SelectedPart = "HumanoidRootPart"
            end
 
        else
                SelectedPart = "HumanoidRootPart"
        end
    end)

game:GetService("RunService").RenderStepped:connect(function()
if getgenv().AntiGroundShots == true and Plr.Character.Humanoid.Jump == true and Plr.Character.Humanoid.FloorMaterial == Enum.Material.Air then
    pcall(function()
        local TargetVelv5 = Plr.Character.HumanoidRootPart
TargetVelv5.Velocity = Vector3.new(TargetVelv5.Velocity.X, math.abs(TargetVelv5.Velocity.Y * 0.36),
 TargetVelv5.Velocity.Z)
        TargetVelv5.AssemblyLinearVelocity = Vector3.new(TargetVelv5.Velocity.X, math.abs(TargetVelv5.Velocity.Y * 0.36), TargetVelv5.Velocity.Z)
    end)
    end
end)

getgenv().AimingSettings = {
    Aimbot = {
        Radius = 45,
        Hitbox = "Head",
        CameraMode = true,
        MouseMode = false,
        HitAirshots = true,
        AutoPrediction = false,
        NotificationMode = false,
        Keybind = Enum.KeyCode.Q,
        PredictionAmount = 0.135836569819,



        Smoothing = {
        Enabled = true,
        Amount = 0.080
    },
 }
}

loadstring(game:HttpGet("https://raw.githubusercontent.com/Tenakii/tenaaki/main/genericaimbot.v.2.0.0"))()

end)

local SecondButton = SecondPage.AddButton("Q tool", function()
local k="Q"local t=Instance.new("Tool")t.RequiresHandle=false t.Name=k t.TextureId="http://www.roblox.com/asset/?id=607405653"local function m()t.Parent=game.Players.LocalPlayer.Backpack print("Tool moved to your Roblox inventory.")end if not game.Players.LocalPlayer.Backpack:FindFirstChild(t.Name)then m()end local b=false local function a()if not b then b=true local v=game:GetService("VirtualInputManager")v:SendKeyEvent(true,k,false,game)wait(0.2)b=false end end t.Activated:Connect(a)game.Players.LocalPlayer.CharacterAdded:Connect(function()if not game.Players.LocalPlayer.Backpack:FindFirstChild(t.Name)then m()end end)print("Tool bound to key '"..k.."' and is in your inventory.")local AkaliNotif=loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/Dynissimo/main/Scripts/AkaliNotif.lua"))()local Notify=AkaliNotif.Notify Notify({Description="Made by J3do",Title="Notification",Duration=5})
    end)

local SecondButton FirstPage.AddButton("Silent aim", function()
getgenv().Memelouse3150 = { 
    Silent = {
        Enabled     = true,
        Part        = "Head", "LowerTorso", "HumanoidRootPart", "RightUpperArm", "LeftUpperArm", "RightLowerLeg", "LeftLowerLeg",
        ClosestPart = true,
        
		PredictMovement    = true,
        PredictionVelocity = 0.102421,
        
        AntiGroundShots = true,
        
        WallCheck   = true,
        CheckIf_KO  = false,
	},
    SilentFOV = {
        Visible = false,
        Radius  = 50,
    },
    Tracer = {
        Key =   "C",
        Enabled = true,
        Part    = "HumanoidRootPart",
        ClosestPart = true,
        
		DisableTargetDeath = true,
		DisableLocalDeath  = true,
        
        UseCircleRadius      = false,
        DisableOutSideCircle = false,
        
		UseShake   = true,
		ShakeValue = 5,

		PredictMovement    = true,
        PredictionVelocity = 0.146,
        
        WallCheck  = true,
        CheckIf_KO = false,

        Smoothness = 0.1,
    },
    TracerFOV = {
        Visible = false,
        Radius  = 55,
    },
    GunFOV =  {
        Enabled = false,-- // Gun Fov / fov is automatically changed to specific gun equipped
        ["Double-Barrel SG"] = {["FOV"] = 15}, -- DB
        ["Revolver"] = {["FOV"] = 10}, -- rev
        ["SMG"] = {["FOV"] = 23}, -- smg
        ["Shotgun"] = { ["FOV"] = 20}, -- shotgun
        ["Rifle"] = { ["FOV"] = 20}, -- Rifle
        ["TacticalShotgun"] = {["FOV"] = 24}, -- rev
        ["Silencer"] = {["FOV"] = 17}, -- smg
        ["AK47"] = { ["FOV"] = 10}, -- shotgun
        ["AR"] = { ["FOV"] = 10}, -- Rifle
        -- // You Can Add Custom :p
	},
	
	Both = {
		DetectDesync    = true,
		DesyncDetection = 80,
		
        UnderGroundResolver    = false,
	
	},
}

local Prey = nil
local Plr  = nil

local Players, Client, Mouse, RS, Camera =
    game:GetService("Players"),
    game:GetService("Players").LocalPlayer,
    game:GetService("Players").LocalPlayer:GetMouse(),
    game:GetService("RunService"),
    game:GetService("Workspace").CurrentCamera

local Circle       = Drawing.new("Circle")
local TracerCircle = Drawing.new("Circle")

Circle.Color           = Color3.new(1,1,1)
Circle.Thickness       = 1
TracerCircle.Color     = Color3.new(1,1,1)
TracerCircle.Thickness = 1

local UpdateFOV = function ()
    if (not Circle and not TracerCircle) then
        return Circle and TracerCircle
    end
    TracerCircle.Visible  = getgenv().Memelouse3150.TracerFOV.Visible
    TracerCircle.Radius   = getgenv().Memelouse3150.TracerFOV.Radius * 3
    TracerCircle.Position = Vector2.new(Mouse.X, Mouse.Y + (game:GetService("GuiService"):GetGuiInset().Y))
    
    Circle.Visible  = getgenv().Memelouse3150.SilentFOV.Visible
    Circle.Radius   = getgenv().Memelouse3150.SilentFOV.Radius * 3
    Circle.Position = Vector2.new(Mouse.X, Mouse.Y + (game:GetService("GuiService"):GetGuiInset().Y))
    return Circle and TracerCircle
end

RS.Heartbeat:Connect(UpdateFOV)

local WallCheck = function(destination, ignore)
    local Origin    = Camera.CFrame.p
    local CheckRay  = Ray.new(Origin, destination - Origin)
    local Hit       = game.workspace:FindPartOnRayWithIgnoreList(CheckRay, ignore)
    return Hit      == nil
end

local WTS = function (Object)
    local ObjectVector = Camera:WorldToScreenPoint(Object.Position)
    return Vector2.new(ObjectVector.X, ObjectVector.Y)
end

local IsOnScreen = function (Object)
    local IsOnScreen = Camera:WorldToScreenPoint(Object.Position)
    return IsOnScreen
end

local FilterObjs = function (Object)
    if string.find(Object.Name, "Gun") then
        return
    end
    if table.find({"Part", "MeshPart", "BasePart"}, Object.ClassName) then
        return true
    end
end

local ClosestPlrFromMouse = function()
    local Target, Closest = nil, 1/0
    
    for _ ,v in pairs(Players:GetPlayers()) do
    	if getgenv().Memelouse3150.Silent.WallCheck then
    		if (v.Character and v ~= Client and v.Character:FindFirstChild("HumanoidRootPart")) then
    			local Position, OnScreen = Camera:WorldToScreenPoint(v.Character.HumanoidRootPart.Position)
    			local Distance = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
    
    			if (Circle.Radius > Distance and Distance < Closest and OnScreen) and WallCheck(v.Character.HumanoidRootPart.Position, {Client, v.Character}) then
    				Closest = Distance
    				Target = v
    			end
    		end
    	else
    		if (v.Character and v ~= Client and v.Character:FindFirstChild("HumanoidRootPart")) then
    			local Position, OnScreen = Camera:WorldToScreenPoint(v.Character.HumanoidRootPart.Position)
    			local Distance = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
    
    			if (Circle.Radius > Distance and Distance < Closest and OnScreen) then
    				Closest = Distance
    				Target = v
    			end
    		end
    	end
    end
    return Target
end

local ClosestPlrFromMouse2 = function()
    local Target, Closest = nil, 1/0
    
    for _ ,v in pairs(Players:GetPlayers()) do
    	if (v.Character and v ~= Client and v.Character:FindFirstChild("HumanoidRootPart")) then
        	if getgenv().Memelouse3150.Tracer.WallCheck then
        		local Position, OnScreen = Camera:WorldToScreenPoint(v.Character.HumanoidRootPart.Position)
        		local Distance = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
        
        		if (Distance < Closest and OnScreen) and WallCheck(v.Character.HumanoidRootPart.Position, {Client, v.Character}) then
        			Closest = Distance
        			Target = v
        		end
                elseif getgenv().Memelouse3150.Tracer.UseCircleRadius then
            		local Position, OnScreen = Camera:WorldToScreenPoint(v.Character.HumanoidRootPart.Position)
            		local Distance = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                    if (TracerCircle.Radius > Distance and Distance < Closest and OnScreen) and WallCheck(v.Character.HumanoidRootPart.Position, {Client, v.Character}) then
            			Closest = Distance
            			Target = v
                    end
        	    else
        			local Position, OnScreen = Camera:WorldToScreenPoint(v.Character.HumanoidRootPart.Position)
        			local Distance = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
        
        			if (Distance < Closest and OnScreen) then
        				Closest = Distance
        				Target = v
        			end
        		end
            end
        end
    return Target
end

local GetClosestBodyPart = function (character)
    local ClosestDistance = 1/0
    local BodyPart = nil
    
    if (character and character:GetChildren()) then
        for _,  x in next, character:GetChildren() do
            if FilterObjs(x) and IsOnScreen(x) then
                local Distance = (WTS(x) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                if (Circle.Radius > Distance and Distance < ClosestDistance) then
                    ClosestDistance = Distance
                    BodyPart = x
                end
            end
        end
    end
    return BodyPart
end

local GetClosestBodyPartV2 = function (character)
    local ClosestDistance = 1/0
    local BodyPart = nil
    
    if (character and character:GetChildren()) then
        for _,  x in next, character:GetChildren() do
            if FilterObjs(x) and IsOnScreen(x) then
                local Distance = (WTS(x) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                if (Distance < ClosestDistance) then
                    ClosestDistance = Distance
                    BodyPart = x
                end
            end
        end
    end
    return BodyPart
end

Mouse.KeyDown:Connect(function(Key)
    local Keybind = getgenv().Memelouse3150.Tracer.Key:lower()
    if (Key == Keybind) then
        if getgenv().Memelouse3150.Tracer.Enabled == true then
            IsTargetting = not IsTargetting
            if IsTargetting then
                Plr = ClosestPlrFromMouse2()
            else
                if Plr ~= nil then
                    Plr = nil
                    IsTargetting = false
                end
            end
        end
    end
end)

local grmt = getrawmetatable(game)
local backupindex = grmt.__index
setreadonly(grmt, false)

grmt.__index = newcclosure(function(self, v)
    if (getgenv().Memelouse3150.Silent.Enabled and Mouse and tostring(v) == "Hit") then
        if Prey and Prey.Character then
    		if getgenv().Memelouse3150.Silent.PredictMovement then
    			local endpoint = game.Players[tostring(Prey)].Character[getgenv().Memelouse3150.Silent.Part].CFrame + (
    				game.Players[tostring(Prey)].Character[getgenv().Memelouse3150.Silent.Part].Velocity * getgenv().Memelouse3150.Silent.PredictionVelocity
    			)
    			return (tostring(v) == "Hit" and endpoint)
    		else
    			local endpoint = game.Players[tostring(Prey)].Character[getgenv().Memelouse3150.Silent.Part].CFrame
    			return (tostring(v) == "Hit" and endpoint)
    		end
        end
    end
    return backupindex(self, v)
end)

RS.Heartbeat:Connect(function()
	if getgenv().Memelouse3150.Silent.Enabled then
	    if Prey and Prey.Character and Prey.Character:WaitForChild(getgenv().Memelouse3150.Silent.Part) then
            if getgenv().Memelouse3150.Both.DetectDesync == true and Prey.Character:WaitForChild("HumanoidRootPart").Velocity.magnitude > getgenv().Memelouse3150.Both.DesyncDetection then            
                pcall(function()
                    local TargetVel = Prey.Character[getgenv().Memelouse3150.Silent.Part]
                    TargetVel.Velocity = Vector3.new(0, 0, 0)
                    TargetVel.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                end)
            end
            if getgenv().Memelouse3150.Silent.AntiGroundShots == true and Prey.Character:FindFirstChild("Humanoid") == Enum.HumanoidStateType.Freefall then
                pcall(function()
                    local TargetVelv5 = Prey.Character[getgenv().Memelouse3150.Silent.Part]
                    TargetVelv5.Velocity = Vector3.new(TargetVelv5.Velocity.X, (TargetVelv5.Velocity.Y * 0.5), TargetVelv5.Velocity.Z)
                    TargetVelv5.AssemblyLinearVelocity = Vector3.new(TargetVelv5.Velocity.X, (TargetVelv5.Velocity.Y * 0.5), TargetVelv5.Velocity.Z)
                end)
            end
            if getgenv().Memelouse3150.Both.UnderGroundResolver == true then            
                pcall(function()
                    local TargetVelv2 = Prey.Character[getgenv().Memelouse3150.Silent.Part]
                    TargetVelv2.Velocity = Vector3.new(TargetVelv2.Velocity.X, 0, TargetVelv2.Velocity.Z)
                    TargetVelv2.AssemblyLinearVelocity = Vector3.new(TargetVelv2.Velocity.X, 0, TargetVelv2.Velocity.Z)
                end)
            end
	    end
	end
    if getgenv().Memelouse3150.Tracer.Enabled == true then
        if getgenv().Memelouse3150.Both.DetectDesync == true and Plr and Plr.Character and Plr.Character:WaitForChild(getgenv().Memelouse3150.Tracer.Part) and Plr.Character:WaitForChild("HumanoidRootPart").Velocity.magnitude > getgenv().Memelouse3150.Both.DesyncDetection then
            pcall(function()
                local TargetVelv3 = Plr.Character[getgenv().Memelouse3150.Tracer.Part]
                TargetVelv3.Velocity = Vector3.new(0, 0, 0)
                TargetVelv3.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
            end)
        end
        if getgenv().Memelouse3150.Both.UnderGroundResolver == true and Plr and Plr.Character and Plr.Character:WaitForChild(getgenv().Memelouse3150.Tracer.Part)then
            pcall(function()
                local TargetVelv4 = Plr.Character[getgenv().Memelouse3150.Tracer.Part]
                TargetVelv4.Velocity = Vector3.new(TargetVelv4.Velocity.X, 0, TargetVelv4.Velocity.Z)
                TargetVelv4.AssemblyLinearVelocity = Vector3.new(TargetVelv4.Velocity.X, 0, TargetVelv4.Velocity.Z)
            end)
        end
    end
end)

RS.RenderStepped:Connect(function()
	if getgenv().Memelouse3150.Silent.Enabled then
        if getgenv().Memelouse3150.Silent.CheckIf_KO == true and Prey and Prey.Character then 
            local KOd = Prey.Character:WaitForChild("BodyEffects")["K.O"].Value
            local Grabbed = Prey.Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
            if KOd or Grabbed then
                Prey = nil
            end
        end
	end
    if getgenv().Memelouse3150.Tracer.Enabled == true then
        if getgenv().Memelouse3150.Tracer.CheckIf_KO == true and Plr and Plr.Character then 
            local KOd = Plr.Character:WaitForChild("BodyEffects")["K.O"].Value
            local Grabbed = Plr.Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
            if KOd or Grabbed then
                Plr = nil
                IsTargetting = false
            end
        end
		if getgenv().Memelouse3150.Tracer.DisableTargetDeath == true and Plr and Plr.Character:FindFirstChild("Humanoid") then
			if Plr.Character.Humanoid.health < 4 then
				Plr = nil
				IsTargetting = false
			end
		end
		if getgenv().Memelouse3150.Tracer.DisableLocalDeath == true and Plr and Plr.Character:FindFirstChild("Humanoid") then
			if Client.Character.Humanoid.health < 4 then
				Plr = nil
				IsTargetting = false
			end
		end
        if getgenv().Memelouse3150.Tracer.DisableOutSideCircle == true and Plr and Plr.Character and Plr.Character:WaitForChild("HumanoidRootPart") then
            if
            TracerCircle.Radius <
                (Vector2.new(
                    Camera:WorldToScreenPoint(Plr.Character.HumanoidRootPart.Position).X,
                    Camera:WorldToScreenPoint(Plr.Character.HumanoidRootPart.Position).Y
                ) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
             then
                Plr = nil
                IsTargetting = false
            end
        end
		if getgenv().Memelouse3150.Tracer.PredictMovement and Plr and Plr.Character and Plr.Character:FindFirstChild(getgenv().Memelouse3150.Tracer.Part) then
			if getgenv().Memelouse3150.Tracer.UseShake then
				local Main = CFrame.new(Camera.CFrame.p,Plr.Character[getgenv().Memelouse3150.Tracer.Part].Position + Plr.Character[getgenv().Memelouse3150.Tracer.Part].Velocity * getgenv().Memelouse3150.Tracer.PredictionVelocity +
				Vector3.new(
					math.random(-getgenv().Memelouse3150.Tracer.ShakeValue, getgenv().Memelouse3150.Tracer.ShakeValue),
					math.random(-getgenv().Memelouse3150.Tracer.ShakeValue, getgenv().Memelouse3150.Tracer.ShakeValue),
					math.random(-getgenv().Memelouse3150.Tracer.ShakeValue, getgenv().Memelouse3150.Tracer.ShakeValue)
				) * 0.1)
				Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().Memelouse3150.Tracer.Smoothness, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
			else
    			local Main = CFrame.new(Camera.CFrame.p,Plr.Character[getgenv().Memelouse3150.Tracer.Part].Position + Plr.Character[getgenv().Memelouse3150.Tracer.Part].Velocity * getgenv().Memelouse3150.Tracer.PredictionVelocity)
    			Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().Memelouse3150.Tracer.Smoothness, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
			end
		elseif getgenv().Memelouse3150.Tracer.PredictMovement == false and Plr and Plr.Character and Plr.Character:FindFirstChild(getgenv().Memelouse3150.Tracer.Part) then
			if getgenv().Memelouse3150.Tracer.UseShake then
				local Main = CFrame.new(Camera.CFrame.p,Plr.Character[getgenv().Memelouse3150.Tracer.Part].Position +
				Vector3.new(
					math.random(-getgenv().Memelouse3150.Tracer.ShakeValue, getgenv().Memelouse3150.Tracer.ShakeValue),
					math.random(-getgenv().Memelouse3150.Tracer.ShakeValue, getgenv().Memelouse3150.Tracer.ShakeValue),
					math.random(-getgenv().Memelouse3150.Tracer.ShakeValue, getgenv().Memelouse3150.Tracer.ShakeValue)
				) * 0.1)
				Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().Memelouse3150.Tracer.Smoothness, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
		    else
    			local Main = CFrame.new(Camera.CFrame.p,Plr.Character[getgenv().Memelouse3150.Tracer.Part].Position)
    			Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().Memelouse3150.Tracer.Smoothness, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
		    end
		end
	end
end)

task.spawn(function ()
    while task.wait() do
    	if getgenv().Memelouse3150.Silent.Enabled then
            Prey = ClosestPlrFromMouse()
    	end
        if Plr then
            if getgenv().Memelouse3150.Tracer.Enabled and (Plr.Character) and getgenv().Memelouse3150.Tracer.ClosestPart then
                getgenv().Memelouse3150.Tracer.Part = tostring(GetClosestBodyPartV2(Plr.Character))
            end
        end
        if Prey then
            if getgenv().Memelouse3150.Silent.Enabled and (Prey.Character) and getgenv().Memelouse3150.Silent.ClosestPart then
                getgenv().Memelouse3150.Silent.Part = tostring(GetClosestBodyPart(Prey.Character))
            end
        end
    end
end)

local Script = {Functions = {}}
    Script.Functions.getToolName = function(name)
        local split = string.split(string.split(name, "[")[2], "]")[1]
        return split
    end
    Script.Functions.getEquippedWeaponName = function()
        if (Client.Character) and Client.Character:FindFirstChildWhichIsA("Tool") then
           local Tool =  Client.Character:FindFirstChildWhichIsA("Tool")
           if string.find(Tool.Name, "%[") and string.find(Tool.Name, "%]") and not string.find(Tool.Name, "Wallet") and not string.find(Tool.Name, "Phone") then
              return Script.Functions.getToolName(Tool.Name)
           end
        end
        return nil
    end
    RS.RenderStepped:Connect(function()
    if Script.Functions.getEquippedWeaponName() ~= nil then
        local WeaponSettings = getgenv().Memelouse3150.GunFOV[Script.Functions.getEquippedWeaponName()]
        if WeaponSettings ~= nil and getgenv().Memelouse3150.GunFOV.Enabled == true then
            getgenv().Memelouse3150.SilentFOV.Radius = WeaponSettings.FOV
        else
            getgenv().Memelouse3150.SilentFOV.Radius = getgenv().Memelouse3150.SilentFOV.Radius
        end
    end
end)
